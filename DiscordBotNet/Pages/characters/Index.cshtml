@page
@using System.Web
@using DiscordBotNet.Database
@using DiscordBotNet.LegendaryBot
@using DiscordBotNet.LegendaryBot.Entities.BattleEntities.Characters
@using Microsoft.AspNetCore.Mvc.TagHelpers


@inject PostgreSqlContext DatabaseContext
@model DiscordBotNet.Pages.characters.Index

@{
    Layout = "Shared/_NavigationLayout";
}

<!DOCTYPE html>

<html>
<head>
    <link rel="stylesheet" type="text/css" href="css/CharactersnBlessings.css">
    <link rel="stylesheet" type="text/css" href="css/NeutralHref.css">
    <title>Characters</title>

</head>


<body style="background-color: grey;">

<div id="all_filters_parent">
    <form method="get" id="all_filters">
        <input type="text" name="name" value="@Model.Name"/>
        <select name="element">
            <option value="null"> -- Select Element --</option>
            @foreach (Element element in Enum.GetValues<Element>())
            {
                var selected = "";
                if (Model.Element == element)
                {
                    <option value="@element" selected>@element</option>
                }
                else
                {
                    <option value="@element">@element</option>
                }

            }
        </select>
        <select name="sort">
            <option value="level" selected>Level</option>
            <option value="name">Name</option>
            <option value="element">Element</option>
        </select>
        <button type="submit">Submit</button>
    </form>
</div>

@{

    string color = "white";
    IEnumerable<Character> filteredCharactersList = Model.Characters;
    if (Model.Element is not null)
    {
        filteredCharactersList = filteredCharactersList.Where(i => i.Element == Model.Element).ToArray();

    }

    foreach (var i in filteredCharactersList.OfType<Player>())
    {
        await i.LoadAsync(User);
    }
    if (Model.Name.Length > 0)
    {
        filteredCharactersList = filteredCharactersList
            .Where(i => i.Name.ToLower().Contains(Model.Name.ToLower()))
            .ToArray();
    }

    switch (Model.Sort)
    {
        case "element":
            filteredCharactersList = filteredCharactersList.OrderBy(i => i.Element)
                .ToArray();
            break;
        case "name":
            filteredCharactersList = filteredCharactersList.OrderBy(i => i.Name)
                .ToArray();
            break;
        default:
            filteredCharactersList = filteredCharactersList.OrderBy(i => i.Level)
                .ToArray();
            break;

    }
    var filteredCharacters = filteredCharactersList.ToArray();

}


<div id="total_alls">
    @for (var i = 0; i < filteredCharacters.Length; i++)
    {

        <div class="alls_row_div alls_row_div_@color">
            @{
                var theI = i;
            }

            @for (var j = i; j <= theI + 4 && j < filteredCharacters.Length; j++)
            {
                var character = filteredCharacters[j];

                <a href="characters/info?characterId=@HttpUtility.UrlEncode(character.Id.ToString())" style="display: flex;" class="all_div the_href">

                    <img src="@character.ImageRepresentation" style="width: 100px; height: 100px;"/>

                    <div style="position: relative; margin-left: 20px;">
                        <p style="position: relative; ">Name: @character.Name</p>
                        <p> Level: @character.Level</p>
                    </div>

                </a>
           
                i = j;

            }

        </div>
        if (color == "white")
        {
            color = "gray";
        }
        else
        {
            color = "white";
        }
    }
</div>

</body>
</html>